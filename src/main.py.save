##########################
# This is our Numberjack demo - if you can get this to run you're good to go!

# TEst from Will's machine x2

#########################

from Numberjack import *

# Data structure for storing information about courses
class Course:
    def __init__(self, index, course_title, course_code, num_units):
        self.index = index
        self.course_title = course_title
        self.course_code = course_code
        self.num_units = num_units
        self.prereqs = []
    
    def add_prerequisite(self, prereq):
        self.prereqs.append(prereq)

# Creates/returns the list of courses for the specified major
def build_course_data(major):
    if(major == "CSE"):
        return build_cse_course_data()
    elif(major == "CS"):
        return build_cs_course_data()
    elif(major == "ICS"):
        return build_ics_course_data()
    elif(major == "Informatics"):
        return build_informatics_course_data()
    else:
        print "Invalid Major"
        return []

def build_cse_course_data():
    #builds a list of Course objects representing the courses for the CSE major
    return []

def build_cs_course_data():
    #builds a list of Course objects representing the courses for the CS major
    return []

def build_ics_course_data():
    #builds a list of Course objects representing the courses for the ICS major
    return []

def build_informatics_course_data():
    #builds a list of Course objects representing the courses for the Informatics major
    return []

def model_courses(N, max_terms, min_units, prereqs, course_data):
    courses = VarArray(N, 0, max_terms+1) #0 means course not taken, otherwise represents the term the course was taken
    units = VarArray(N, 6)
    
    model = Model(
        #no term was scheduled later than max_terms (objective function)
        [courses[i] < max_terms for i in range(len(courses))], 
        
        #prereqs met for all chosen courses - (a)prereq taken (b)prereq taken before current
        [courses[prereqs[i][j]] < courses[i] for j in range(len(prereqs[i])) for i in range(len(courses)) if courses[i] > 0],
        
        #sum of total units taken must be >= min_units
        Sum([units[i] for i in range(len(courses)) if courses[i] > 0]) >= min_units
        
        #additional constraints will go here
    )
        
    return model;

def solve_courses(model, courses):
    solver = model.load('Mistral')
    solver.solve()
    print_courses([courses[i] for i in range(len(courses)) if courses[i] > 0])
    
def print_courses(courses):
    for i in range(len(courses)):
        print "Course %d: %d" %(i, courses[i])

#main begins execution here

#variable initialization, to be done elsewhere someday
major = "ICS"
course_data = build_course_data(major)  #course data goes here, this is a list of Course objects
N = len(course_data)
prereqs = []
max_terms = 15
min_units = 90

#build model and solve
model = model_courses(N, max_terms, min_units, prereqs)
solve_courses(model, course_data)
   
#def model_queens(N):
#    queens = [Variable(N) for i in range(N)]
#    model  = Model( 
#        AllDiff( queens ),
#        AllDiff( [queens[i] + i for i in range(N)] ),
#        AllDiff( [queens[i] - i for i in range(N)] ) 
#        )
#    return (queens,model)

#def solve_queens(param):
#    (queens,model) = model_queens(param['N'])
#    solver = model.load(param['solver'])
#    solver.solve()
#    print_chessboard(queens)
#    print 'Nodes:', solver.getNodes(), ' Time:', solver.getTime()

#def print_chessboard(queens):
#    separator = '+---'*len(queens)+'+'
#    for queen in queens:
#        print separator
#        print '|   '*queen.get_value()+'| Q |'+'   |'*(len(queens)-1-queen.get_value())
#    print separator

#solve_queens(input({'solver':'Mistral', 'N':10}))
